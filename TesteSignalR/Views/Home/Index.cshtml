<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste SignalR - Gerenciamento de Entregas</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.7/signalr.min.js"></script>
</head>
<body>
    <h1>Teste do SignalR - Gerenciamento de Entregas</h1>
    <div>
        <h2>Login</h2>
        <form id="loginForm">
            <label for="username">Usuário:</label>
            <input type="text" id="username" required>
            <label for="password">Senha:</label>
            <input type="password" id="password" required>
            <button type="submit">Entrar</button>
        </form>
        <p>Status do login: <span id="loginStatus">Não autenticado</span></p>
    </div>
    <hr>
    <div>
        <button id="connect" disabled>Conectar ao SignalR</button>
        <button id="notificar" disabled>Notificar Afiliado</button>
        <button id="aceitar" disabled>Simular Aceitação</button>
        <button id="recusar" disabled>Simular Recusa</button>
        <p>Status: <span id="status">Desconectado</span></p>
        <div id="messages"></div>
    </div>

    <script>
        let token = null; // Token para autenticação
        const hubUrl = "http://localhost:5153/entregashub";
        let hubConnection = null;

        // Elementos HTML
        const loginForm = document.getElementById("loginForm");
        const usernameInput = document.getElementById("username");
        const passwordInput = document.getElementById("password");
        const loginStatus = document.getElementById("loginStatus");
        const connectButton = document.getElementById("connect");
        const notificarButton = document.getElementById("notificar");
        const aceitarButton = document.getElementById("aceitar");
        const recusarButton = document.getElementById("recusar");
        const statusText = document.getElementById("status");
        const messagesDiv = document.getElementById("messages");

        // Método para login
        loginForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const email = usernameInput.value;
            const senha = passwordInput.value;

            try {
                const response = await fetch("http://localhost:5153/api/Login", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ email, senha })
                });

                if (!response.ok) {
                    throw new Error("Login falhou.");
                }

                const data = await response.json();
                token = data.token; // Recebe o token JWT do backend
                loginStatus.textContent = "Autenticado!";
                connectButton.disabled = false;
                notificarButton.disabled = false;
                aceitarButton.disabled = false;
                recusarButton.disabled = false;

                console.log("Login bem-sucedido! Token:", token);
            } catch (err) {
                console.error("Erro no login:", err);
                loginStatus.textContent = "Erro no login.";
            }
        });

        // Conectar ao Hub com autenticação
        connectButton.addEventListener("click", async () => {
            try {
                hubConnection = new signalR.HubConnectionBuilder()
                    .withUrl(hubUrl, {
                        accessTokenFactory: () => token // Adiciona o token ao header Authorization
                    })
                    .configureLogging(signalR.LogLevel.Debug)
                    .build();

                console.log("Tentando conectar ao SignalR...");
                await hubConnection.start();
                statusText.textContent = "Conectado!";
                console.log("Conexão estabelecida com o SignalR!");
            } catch (err) {
                console.error("Erro ao conectar ao SignalR:", err);
                statusText.textContent = "Erro ao conectar.";
            }
        });

        // Notificar afiliado
        notificarButton.addEventListener("click", async () => {
            try {
                const afiliadoId = "1030f449-e1d8-464b-8f3e-315076a97fce";
                const entregaId = "f111c63f-6cd1-40c4-a368-108947647583";
                await hubConnection.invoke("NotificarEntrega", afiliadoId, entregaId);
                console.log(`Notificação enviada para o afiliado ${afiliadoId} sobre a entrega ${entregaId}`);
            } catch (err) {
                console.error("Erro ao enviar notificação:", err);
            }
        });

        // Simular aceitação de entrega
        aceitarButton.addEventListener("click", async () => {
            try {
                hubConnection = new signalR.HubConnectionBuilder()
                    .withUrl(hubUrl, {
                        accessTokenFactory: () => token // Adiciona o token ao header Authorization
                    })
                    .configureLogging(signalR.LogLevel.Debug)
                    .build();
                const entregaId = "f111c63f-6cd1-40c4-a368-108947647583";
                await hubConnection.invoke("ResponderEntrega", entregaId, true);
                console.log(`Simulação: Aceitação da entrega ${entregaId}`);
            } catch (err) {
                console.error("Erro ao simular aceitação:", err);
            }
        });

        // Simular recusa de entrega
        recusarButton.addEventListener("click", async () => {
            try {
                const entregaId = "f111c63f-6cd1-40c4-a368-108947647583";
                await hubConnection.invoke("ResponderEntrega", entregaId, false);
                console.log(`Simulação: Recusa da entrega ${entregaId}`);
            } catch (err) {
                console.error("Erro ao simular recusa:", err);
            }
        });

        // Receber mensagem de notificação
        hubConnection?.on("ReceberEntrega", (entregaId) => {
            const messageElement = document.createElement("p");
            messageElement.textContent = `Nova entrega recebida! ID: ${entregaId}`;
            messagesDiv.appendChild(messageElement);
            console.log("Nova entrega recebida:", entregaId);
        });

        // Receber confirmação de aceitação
        hubConnection?.on("EntregaAceita", (afiliadoId, entregaId) => {
            const messageElement = document.createElement("p");
            messageElement.textContent = `Entrega ${entregaId} aceita pelo afiliado ${afiliadoId}`;
            messagesDiv.appendChild(messageElement);
            console.log(`Entrega ${entregaId} aceita pelo afiliado ${afiliadoId}`);
        });

        // Receber notificação de recusa
        hubConnection?.on("EntregaRecusada", (afiliadoId, entregaId) => {
            const messageElement = document.createElement("p");
            messageElement.textContent = `Entrega ${entregaId} recusada pelo afiliado ${afiliadoId}`;
            messagesDiv.appendChild(messageElement);
            console.log(`Entrega ${entregaId} recusada pelo afiliado ${afiliadoId}`);
        });
    </script>
</body>
</html>
